// <auto-generated />
using System;
using ContractMonthlyClaimSystem.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContractMonthlyClaimSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241024115459_InitialUP")]
    partial class InitialUP
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.AcademicManager", b =>
                {
                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("AcademicManagers");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.Approval", b =>
                {
                    b.Property<string>("ApprovalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApprovalId");

                    b.HasIndex("ClaimId");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.Claim", b =>
                {
                    b.Property<string>("ClaimId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClaimStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HoursWorked")
                        .HasColumnType("int");

                    b.Property<string>("LecturerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ClaimId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.ClaimDetail", b =>
                {
                    b.Property<int>("ClaimDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimDetailId"));

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalClaimAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalHoursWorked")
                        .HasColumnType("int");

                    b.HasKey("ClaimDetailId");

                    b.HasIndex("ClaimId");

                    b.ToTable("ClaimDetails");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.ProgrammeCoordinator", b =>
                {
                    b.Property<string>("CoordinatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoordinatorId");

                    b.HasIndex("UserId");

                    b.ToTable("ProgrammeCoordinators");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.SupportingDocument", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ClaimId");

                    b.ToTable("SupportingDocuments");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Lecturer", b =>
                {
                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LecturerId");

                    b.HasIndex("UserId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.AcademicManager", b =>
                {
                    b.HasOne("ContractMonthlyClaimSystem.Models.User", null)
                        .WithMany("AcademicManagers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.Approval", b =>
                {
                    b.HasOne("ContractMonthlyClaimSystem.Models.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.Claim", b =>
                {
                    b.HasOne("Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.ClaimDetail", b =>
                {
                    b.HasOne("ContractMonthlyClaimSystem.Models.Claim", "Claim")
                        .WithMany("ClaimDetails")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.ProgrammeCoordinator", b =>
                {
                    b.HasOne("ContractMonthlyClaimSystem.Models.User", null)
                        .WithMany("ProgrammeCoordinators")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.SupportingDocument", b =>
                {
                    b.HasOne("ContractMonthlyClaimSystem.Models.Claim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("Lecturer", b =>
                {
                    b.HasOne("ContractMonthlyClaimSystem.Models.User", "User")
                        .WithMany("Lecturers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.Claim", b =>
                {
                    b.Navigation("ClaimDetails");
                });

            modelBuilder.Entity("ContractMonthlyClaimSystem.Models.User", b =>
                {
                    b.Navigation("AcademicManagers");

                    b.Navigation("Lecturers");

                    b.Navigation("ProgrammeCoordinators");
                });
#pragma warning restore 612, 618
        }
    }
}
